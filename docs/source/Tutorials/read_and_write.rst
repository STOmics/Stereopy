Read and Write
==================
This section contains the introduction of reading and writing.

File Format
-------------------------
Here is the list of input file that Stereopy could read:

:GEM: GEM file contains GeneID, x,y,count. x, y represent spatial positions of the gene in the tissue section, and count means the number of gene expression.
:GEF(Square Bin): Square Bin type of GEF file. The suffix of GEF file includes: SN.raw.gef, SN.gef, SN.tissue.gefï¼ˆ`Square Bin GEF details <https://www.processon.com/view/link/610cc49c7d9c087bbd1ab7ab#map>`_)
:GEF(Cell Bin): Cell bin type of GEF file. The suffix of GEF file is cellbin.gef (`Cell bin GEF details <https://www.processon.com/view/link/6274de9c0791290711fa418d#map>`_)
:Stereo H5ad: One type of h5ad file containing StereoExpData object which is generated by Stereopy.
:Anndata H5ad: One type of h5ad file containing Anndata object which is generated by scanpy.

Reading
-------------------------
GEM File
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the gem file
    mouse_data_path = './SS200000135TL_D1.gem'
    data = st.io.read_gem(
            file_path= mouse_data_path,
            sep='\t', bin_type="bins",
            bin_size=100, is_sparse=True)

`parameters <https://stereopy.readthedocs.io/en/latest/api/stereo.io.read_gem.html#stereo.io.read_gem>`_

GEF File
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000135TL_D1.tissue.gef'
    gef_info = st.io.read_gef_info(file_path=mouse_data_path)

You could get the info from input GEF file and use the info to set the parameter of :mod:`stereo.io.read_gef`


GEF File (Square Bin)
****************
.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000135TL_D1.tissue.gef'
    data = st.io.read_gef(
            file_path= mouse_data_path,
            bin_size=100, is_sparse=True,)

GEF File (Cell Bin)
****************
.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000135TL_D1.cellbin.gef'
    data = st.io.read_gef(
            file_path= mouse_data_path,
            is_sparse=True,
            bin_type='cell_bins',)

`parameters <https://stereopy.readthedocs.io/en/latest/api/stereo.io.read_gef.html#stereo.io.read_gef>`_

Stereo H5ad File
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000141TL_B5_raw.h5ad'
    data = st.io.read_stereo_h5ad(file_path=mouse_data_path, use_raw=True, use_result=True,)

`parameters <https://stereopy.readthedocs.io/en/latest/api/stereo.io.read_stereo_h5ad.html>`_

Anndata H5ad File
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './DP8400013846TR_F5.anndata.h5ad'
    data = st.io.read_ann_h5ad(file_path=mouse_data_path, spatial_key=None)

`parameters <https://stereopy.readthedocs.io/en/latest/api/stereo.io.read_ann_h5ad.html>`_

Seurat H5ad File
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    seurat_h5ad = './SS200000003BR_B3.annotation.h5ad'
    data = st.io.read_seurat_h5ad(file_path=seurat_h5ad, use_raw=True,)

`parameters <https://stereopy.readthedocs.io/en/latest/api/stereo.io.read_seurat_h5ad.html>`_

Writing
-------------------------
After reading and other steps, you could save the data into output files.

GEF File
~~~~~~~~~~~~~~~~~~~~~~~

New GEF File
****************
You may use lasso tool or gene_list/region_list to filter the data and these steps can generate filtered StereoExpObject,
so you could save the new data into a new GEF file.

.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000135TL_D1.tissue.gef'
    data = st.io.read_gef(file_path=mouse_data_path, bin_size=50)

    # use gene list for filtering
    data.tl.filter_genes(gene_list=['H2al2a','Gm6135'], inplace=True)

    # save filtered data and output file only contains the result after filtering
    st.io.write_mid_gef(data=data, output='./DP8400013846TR_F5.filtered.gef')

`example of lasso tool <https://stereopy.readthedocs.io/en/latest/Tutorials/interactive_cluster.html>`_

Existing GEF File
****************
After you read an input GEF and clustering,
you could add the cluster group(come from leiden/louvain...method) into the input GEF file.

.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000135TL_D1.tissue.gef'
    data = st.io.read_gef(file_path=mouse_data_path, bin_size=50)

    # clustering
    data.tl.cal_qc()
    data.tl.raw_checkpoint()
    data.tl.sctransform(res_key='sctransform', inplace=True)
    data.tl.pca(use_highly_genes=False, n_pcs=30, res_key='pca')
    data.tl.neighbors(pca_res_key='pca', n_pcs=30, res_key='neighbors')
    data.tl.umap(pca_res_key='pca', neighbors_res_key='neighbors', res_key='umap')
    data.tl.leiden(neighbors_res_key='neighbors', res_key='leiden')

    # add cluster group stored in cluster_res_key into GEF file which is read before.
    st.io.update_gef(data=data, gef_file=mouse_data_path, cluster_res_key='leiden')

Stereo H5ad File
~~~~~~~~~~~~~~~~~~~~~~~
.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000135TL_D1.tissue.gef'
    data = st.io.read_gef(file_path=mouse_data_path, bin_size=50)

    # clustering
    data.tl.cal_qc()
    data.tl.raw_checkpoint()
    data.tl.sctransform(res_key='sctransform', inplace=True)
    data.tl.pca(use_highly_genes=False, n_pcs=30, res_key='pca')
    data.tl.neighbors(pca_res_key='pca', n_pcs=30, res_key='neighbors')
    data.tl.umap(pca_res_key='pca', neighbors_res_key='neighbors', res_key='umap')
    data.tl.leiden(neighbors_res_key='neighbors', res_key='leiden')
    data.tl.louvain(neighbors_res_key='neighbors', res_key='louvain')

    # data.tl.key_record is a dictionary created automatically by Stereopy while you are running coordinated commands of Stereopy.
    # keys in data.tl.key_record is set by Stereopy, values is set according to the res_key in the commands above.
    print(data.tl.key_record)

    # write a new h5ad with StereoExpObject, if key_record = None, it will use the res_key stored in data.tl.key_record)
    st.io.write_h5ad(data, use_raw=True, use_result=True, key_record=None)

    # you could create a dictionary which is similar to data.tl.key_record:
    outkey_record = {'cluster':['leiden','louvain'],}

    st.io.write_h5ad(data, use_raw=True, use_result=True, key_record=outkey_record, output='./DP8400013846TR_F5.h5ad')


Anndata H5ad File
~~~~~~~~~~~~~~~~~~~~~~~
.. code:: python

    import warnings
    warnings.filterwarnings('ignore')
    import stereo as st

    # read the GEF file
    mouse_data_path = './SS200000135TL_D1.tissue.gef'
    data = st.io.read_gef(file_path=mouse_data_path, bin_size=50)

    # conversion
    adata = st.io.stereo_to_anndata(data,flavor='seurat',output='out.h5ad')

`work with scanpy/seurat <https://stereopy.readthedocs.io/en/latest/Tutorials/FormatConversion.html>`_

